int dp[105][105][105];


int solve(string &A, string &B, string &C,int i, int j, int k){
     if(i==0 || j==0 || k==0)return 0;
     if(dp[i][j][k]!=-1)return dp[i][j][k];
     if(A[i-1]==B[j-1] && B[j-1]==C[k-1]){
       return   dp[i][j][k] =solve(A,B,C,i-1,j-1,k-1)+1;  
     }
     
     int ans1=max(solve(A,B,C,i-1,j,k),solve(A,B,C,i,j-1,k));
     int ans2=max(solve(A,B,C,i,j,k-1),solve(A,B,C,i-1,j-1,k));
     int ans3=max(solve(A,B,C,i-1,j,k-1),solve(A,B,C,i,j-1,k-1));
     
     return dp[i][j][k]=max(ans1,max(ans2,ans3));
}

int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
{         
          memset(dp,-1,sizeof(dp));
          return solve(A,B,C,n1,n2,n3);
}
