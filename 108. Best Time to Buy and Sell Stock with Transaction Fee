class Solution {
public:
    
    int maxProfitHelper(vector<int>&prices, int i, int fee,vector<vector<int>>&cache,int stock){
           if(i==prices.size()){
                if(!stock)return 0;
                return -999;
           }
           if(cache[i][stock]!=-1)return cache[i][stock];
           if(stock)
               return cache[i][1]=max(prices[i]-fee + maxProfitHelper(prices,i+1,fee,cache,!stock),maxProfitHelper(prices,i+1,fee,cache,stock));
           return cache[i][0]=max(-prices[i]+maxProfitHelper(prices,i+1,fee,cache,!stock),maxProfitHelper(prices,i+1,fee,cache,stock));
    }
    int maxProfit(vector<int>& prices, int fee) {
        vector<vector<int>>cache(prices.size(),vector<int>(2,-1));
        return maxProfitHelper(prices,0,fee,cache,0);
    }
};
